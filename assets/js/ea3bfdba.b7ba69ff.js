(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[717],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1619:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),o=["components"],l={sidebar_position:3},s="Writing a custom lint rule",c={unversionedId:"writing-a-custom-lint-rule",id:"writing-a-custom-lint-rule",isDocsHomePage:!1,title:"Writing a custom lint rule",description:"1. Parse a file, so you can see how node types are identified (see Parsing a file). Also look at the file internal/ast/index.ts (AnyNode) to see a list of node types.",source:"@site/docs/writing-a-custom-lint-rule.md",sourceDirName:".",slug:"/writing-a-custom-lint-rule",permalink:"/static-analysis-docs/docs/writing-a-custom-lint-rule",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/writing-a-custom-lint-rule.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Helpful Links",permalink:"/static-analysis-docs/docs/helpful-links"}},u=[],p={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"writing-a-custom-lint-rule"},"Writing a custom lint rule"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Parse a file, so you can see how node types are identified (see ",(0,a.kt)("a",{parentName:"li",href:"/docs/commands/parsing-a-file"},"Parsing a file"),"). Also look at the file ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/rome/tools/blob/main/internal/ast/index.ts"},"internal/ast/index.ts")," (",(0,a.kt)("inlineCode",{parentName:"li"},"AnyNode"),") to see a list of node types."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/commands/custom-lint-rule"},"Create a custom lint rule")),(0,a.kt)("li",{parentName:"ol"},"In your ",(0,a.kt)("inlineCode",{parentName:"li"},"[no/use][concept].[category]")," file (ex. ",(0,a.kt)("inlineCode",{parentName:"li"},"noHaha.ts"),"), write your lint rule")),(0,a.kt)("p",null,"example:"),(0,a.kt)("p",null,'Variable names cannot contain "lol" in them.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="noHaha.ts"',title:'"noHaha.ts"'},'import { createVisitor, signals } from \'@internal/compiler\';\nimport { descriptions } from \'@internal/diagnostics\';\n\nexport default createVisitor({\n    name: "js/noHaha",\n    enter(path) {\n        const { node } = path;\n\n        if (\n            node.type === "JSBindingIdentifier" &&\n            node.name.toLowerCase().includes("lol")\n        ) {\n            path.context.addNodeDiagnostic(node, descriptions.LINT.JS_NO_HAHA);\n        }\n\n        return signals.retain;\n    },\n});\n')),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Add a message for the lint rule")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="internal/diagnostics/descriptions/lint.ts"',title:'"internal/diagnostics/descriptions/lint.ts"'},'export const lint = createDiagnosticsCategory({\n    JS_NO_HAHA: {\n        category: DIAGNOSTIC_CATEGORIES["lint/js/noHaha"],\n        message: markup`You cannot have lol in a variable name!`,\n    },\n    ...\n')),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Write a test suite for your custom lint rule by writing tests in the ",(0,a.kt)("inlineCode",{parentName:"li"},"[no/use][concept].test.toml")," file (ex. ",(0,a.kt)("inlineCode",{parentName:"li"},"noHaha.test.toml"),")")),(0,a.kt)("p",null,"example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="noHaha.test.toml"',title:'"noHaha.test.toml"'},'filename = "file.ts"\ninvalid = [\n    """\n    let lolHaha = "1";\n    """,\n    """\n    let lol = "1";\n    """\n]\nvalid = [\n    """\n    let test = "1";\n    """\n]\n')),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/commands/testing"},"Run the tests"))))}m.isMDXComponent=!0}}]);